// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\SivapriyaAnbu\Documents\golang_training\golang_training_sivapriya\Projects\Event-booking_management\src\daos\event.go

// Package mock_daos is a generated GoMock package.
package mock_daos

import (
	models "event-booking/database/models"
	context "event-booking/utils/context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventDAO is a mock of EventDAO interface.
type MockEventDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEventDAOMockRecorder
}

// MockEventDAOMockRecorder is the mock recorder for MockEventDAO.
type MockEventDAOMockRecorder struct {
	mock *MockEventDAO
}

// NewMockEventDAO creates a new mock instance.
func NewMockEventDAO(ctrl *gomock.Controller) *MockEventDAO {
	mock := &MockEventDAO{ctrl: ctrl}
	mock.recorder = &MockEventDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDAO) EXPECT() *MockEventDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventDAO) Create(ctx *context.Context, event *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventDAOMockRecorder) Create(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventDAO)(nil).Create), ctx, event)
}

// Delete mocks base method.
func (m *MockEventDAO) Delete(ctx *context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventDAOMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventDAO)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockEventDAO) Get(ctx *context.Context, id string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventDAOMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventDAO)(nil).Get), ctx, id)
}

// GetAllEvents mocks base method.
func (m *MockEventDAO) GetAllEvents(ctx *context.Context) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockEventDAOMockRecorder) GetAllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventDAO)(nil).GetAllEvents), ctx)
}

// Update mocks base method.
func (m *MockEventDAO) Update(ctx *context.Context, id string, updatedEvent *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, updatedEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEventDAOMockRecorder) Update(ctx, id, updatedEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventDAO)(nil).Update), ctx, id, updatedEvent)
}

// UpdateCapacity mocks base method.
func (m *MockEventDAO) UpdateCapacity(ctx *context.Context, eventID string, capacityChange int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapacity", ctx, eventID, capacityChange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapacity indicates an expected call of UpdateCapacity.
func (mr *MockEventDAOMockRecorder) UpdateCapacity(ctx, eventID, capacityChange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapacity", reflect.TypeOf((*MockEventDAO)(nil).UpdateCapacity), ctx, eventID, capacityChange)
}

// Upsert mocks base method.
func (m *MockEventDAO) Upsert(ctx *context.Context, event *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockEventDAOMockRecorder) Upsert(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockEventDAO)(nil).Upsert), ctx, event)
}
